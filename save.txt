---
- name: Deploy project with Docker using Ansible
  hosts: localhost
  connection: local
  gather_facts: no
  become: yes

  vars_files:
    - secret.yml

  vars:
    ansible_python_interpreter: /usr/bin/python3

    node_src_path: "/tmp/node-v14.18.2-linux-x64.tar.xz"
    node_dest_path: "/data/bijendar/final/"

    git_repo_url: "gitlab.jprp.jio.com/agriiot/jkkm/kmsv2.git"
    git_dest_dir: "/data/bijendar/final/kmsv2"

    copy_src_path: "/data/bijendar/final/kmsv2/"
    copy_dest_path: "/data/bijendar/final/"

    dockerfile_path: "/data/bijendar/final"
    work_dir: "/app/"  # path for all source files prsent inside docker container
    copy_dir: "/data/bijendar/final/temp/"  # move all data from container to this location

    tar_src_path: "/data/bijendar/final/temp/"

    artifactory_url: "http://10.135.128.207/artifactory/jkkm/tags/bijendar/"

    temp_path: "/data/bijendar/final/temp"
    target_logs_directory: "/data/bijendar/final/"



  tasks:
    - name: Copy Node and Npm tar file
      copy:
        src: "{{ node_src_path }}"
        dest: "{{ node_dest_path }}"

    - name: Clone Git repository
      ansible.builtin.git:
        repo: "http://{{ git_usr }}:{{ git_psw }}@{{ git_repo_url }}"
        dest: "{{ git_dest_dir }}"
        version: "{{ git_branch }}"


    - name: Checkout specific version within the cloned branch
      command: git checkout "{{ git_version }}"
      args:
        chdir: "{{ git_dest_dir }}"


    - name: Copy all files
      copy:
        src: "{{ copy_src_path }}"
        dest: "{{ copy_dest_path }}"


    - name: Remove "kmsv2" directory
      file:
        path: "{{ git_dest_dir }}"
        state: absent

    - name: Start Docker service
      service:
        name: docker
        state: started

    - name: Upgrade pip
      pip:
        name: pip
        executable: pip3
        state: latest

    - name: Install Docker Python module
      pip:
        name: docker
        executable: pip3
        state: present
    
    - name: Check if Docker image exists
      command: docker images -q node_image:latest
      register: image_check
      ignore_errors: yes

    - name: Build Docker image
      shell: |
        docker build -t node_image "{{ dockerfile_path }}" 2>&1 | tee /tmp/docker_build_logs.txt
      args:
        executable: /bin/bash
      register: build_result
      when: image_check.rc != 0  # Build only if the image doesn't exist

    - name: Copy build logs to target directory
      copy:
        src: /tmp/docker_build_logs.txt
        dest: "{{ target_logs_directory }}"

    - name: Build Docker container
      docker_container:
        name: node_container
        image: node_image
        state: started
        detach: yes
      register: container_info

    - name: Create the "temp" directory
      file:
        path: "{{ temp_path }}"
        state: directory

    - name: Copy data from Docker container to local directory
      command: docker cp {{ container_info.container.Id }}:/app/ /data/bijendar/final/temp/kmsv2/

    - name: Stop Docker container
      docker_container:
        name: node_container
        state: stopped
      ignore_errors: yes

    - name: Remove Docker container
      docker_container:
        name: node_container
        state: absent
    
    - name: Prune Docker Containers
      command: docker container prune -f

    - name: Create tar.gz archive
      archive:
        path: "{{ tar_src_path }}"
        dest: "/data/bijendar/final/{{ git_version }}.tar.gz"
        format: gz

    - name: Uplaod tar to Artifactory
      command: curl -v -X PUT --user "{{ arti_username }}":"{{ arti_password }}" --upload-file "/data/bijendar/final/{{ git_version }}.tar.gz"  "{{ artifactory_url }}"


